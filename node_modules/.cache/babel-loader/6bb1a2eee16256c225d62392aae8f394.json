{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\ecommerce\\\\front-end\\\\src\\\\Containers\\\\Auth\\\\ForgetPassword\\\\NewPassword\\\\NewPassword.js\";\nimport React, { Component } from \"react\";\nimport swal from 'sweetalert';\nimport Button from \"../../../../Components/Button/Button\";\nimport Input from \"../../../../Components/Input/Input\";\nimport \"./NewPassword.css\";\nimport { length, required } from \"../../../../util/validators\";\nimport Footer from '../../../../Components/MainComponents/Footer/Footer';\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ResetForm: {\n        password: {\n          value: \"\",\n          valid: false,\n          touched: false,\n          validators: [required, length({\n            min: 5\n          })]\n        },\n        formIsValid: false\n      }\n    };\n\n    this.setNewPasswordHandler = async (event, authData) => {\n      event.preventDefault();\n      fetch(process.env.BACKEND_URL + '/auth/new-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          password: authData.password,\n          token: this.props.match.params.token\n        })\n      }).then(res => res.json()).then(result => {\n        console.log(result);\n        swal({\n          title: \"Change password successfully!\",\n          text: \"Hello my friend! Just sign in and enjoy\",\n          icon: \"success\",\n          buttons: {\n            text: 'OK'\n          }\n        });\n        this.props.history.push('/login');\n      }).catch(err => console.log(err));\n    };\n\n    this.inputChangeHandler = (input, value) => {\n      this.setState(prevState => {\n        let isValid = true;\n\n        for (const validator of prevState.ResetForm[input].validators) {\n          isValid = isValid && validator(value);\n        }\n\n        const updatedForm = { ...prevState.ResetForm,\n          [input]: { ...prevState.ResetForm[input],\n            valid: isValid,\n            value: value\n          }\n        };\n        let formIsValid = true;\n\n        for (const inputName in updatedForm) {\n          formIsValid = formIsValid && updatedForm[inputName].valid;\n        }\n\n        return {\n          ResetForm: updatedForm,\n          formIsValid: formIsValid\n        };\n      });\n    };\n\n    this.inputBlurHandler = input => {\n      this.setState(prevState => {\n        return {\n          ResetForm: { ...prevState.ResetForm,\n            [input]: { ...prevState.ResetForm[input],\n              touched: true\n            }\n          }\n        };\n      });\n    };\n  }\n\n  render() {\n    localStorage.removeItem(\"page\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loginSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-lg-6\",\n      style: {\n        display: 'block',\n        margin: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      \"aria-current\": \"page\",\n      className: \"navbar-brand login\",\n      href: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }, \"Winkel\"), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"loginTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: e => this.setNewPasswordHandler(e, {\n        password: this.state.ResetForm.password.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      id: \"password\",\n      textLabel: \"Password\",\n      type: \"password\",\n      onChange: this.inputChangeHandler,\n      onBlur: this.inputBlurHandler.bind(this, \"password\"),\n      value: this.state.ResetForm[\"password\"].value,\n      valid: this.state.ResetForm[\"password\"].valid,\n      touched: this.state.ResetForm[\"password\"].touched,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      auth: \"SET NEW PASSWORD\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 19\n      }\n    })))))), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/ecommerce/front-end/src/Containers/Auth/ForgetPassword/NewPassword/NewPassword.js"],"names":["React","Component","swal","Button","Input","length","required","Footer","Login","state","ResetForm","password","value","valid","touched","validators","min","formIsValid","setNewPasswordHandler","event","authData","preventDefault","fetch","process","env","BACKEND_URL","method","headers","body","JSON","stringify","token","props","match","params","then","res","json","result","console","log","title","text","icon","buttons","history","push","catch","err","inputChangeHandler","input","setState","prevState","isValid","validator","updatedForm","inputName","inputBlurHandler","render","localStorage","removeItem","display","margin","e","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport swal from 'sweetalert';\r\nimport Button from \"../../../../Components/Button/Button\";\r\nimport Input from \"../../../../Components/Input/Input\";\r\nimport \"./NewPassword.css\";\r\nimport { length,required } from \"../../../../util/validators\";\r\nimport Footer from '../../../../Components/MainComponents/Footer/Footer'\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    ResetForm: {\r\n        password: {\r\n            value: \"\",\r\n            valid: false,\r\n            touched: false,\r\n            validators: [required, length({ min: 5 })],\r\n          },\r\n      formIsValid: false,\r\n    },\r\n  };\r\n\r\n  setNewPasswordHandler=async(event,authData)=>{\r\n    event.preventDefault();\r\n    fetch(process.env.BACKEND_URL+'/auth/new-password',{\r\n      method:'POST',\r\n      headers:{\r\n        'Content-Type':'application/json'\r\n            },\r\n      body:JSON.stringify({password:authData.password,token:this.props.match.params.token}),\r\n    })\r\n    .then(res=>res.json())\r\n      .then(result=>{\r\n          console.log(result)\r\n        swal({\r\n          title: \"Change password successfully!\",\r\n          text: \"Hello my friend! Just sign in and enjoy\",\r\n          icon: \"success\",\r\n          buttons:{\r\n            text:'OK'\r\n          }\r\n        })\r\n        this.props.history.push('/login')\r\n      })\r\n    .catch(err=>console.log(err))\r\n  }\r\n  inputChangeHandler = (input, value) => {\r\n    this.setState((prevState) => {\r\n      let isValid = true;\r\n      for (const validator of prevState.ResetForm[input].validators) {\r\n        isValid = isValid && validator(value);\r\n      }\r\n      const updatedForm = {\r\n        ...prevState.ResetForm,\r\n        [input]: {\r\n          ...prevState.ResetForm[input],\r\n          valid: isValid,\r\n          value: value,\r\n        },\r\n      };\r\n      let formIsValid = true;\r\n      for (const inputName in updatedForm) {\r\n        formIsValid = formIsValid && updatedForm[inputName].valid;\r\n      }\r\n      return {\r\n        ResetForm: updatedForm,\r\n        formIsValid: formIsValid,\r\n      };\r\n    });\r\n  };\r\n\r\n  inputBlurHandler = (input) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        ResetForm: {\r\n          ...prevState.ResetForm,\r\n          [input]: {\r\n            ...prevState.ResetForm[input],\r\n            touched: true,\r\n          },\r\n        },\r\n      };\r\n    });\r\n  };\r\n  render() {\r\n    localStorage.removeItem(\"page\");\r\n    return (\r\n      <div className=\"loginSection\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-6\" style={{display:'block',margin:'auto'}}>\r\n              <div className=\"login-form\">\r\n              <a aria-current=\"page\" className=\"navbar-brand login\" href=\"/\">Winkel</a>\r\n                <h2 className=\"loginTitle\">Login</h2>\r\n                <form  onSubmit={(e) =>this.setNewPasswordHandler(e, {\r\n                      password: this.state.ResetForm.password.value})}>\r\n                 <Input\r\n                    id=\"password\"\r\n                    textLabel=\"Password\"\r\n                    type=\"password\"\r\n                    onChange={this.inputChangeHandler}\r\n                    onBlur={this.inputBlurHandler.bind(this, \"password\")}\r\n                    value={this.state.ResetForm[\"password\"].value}\r\n                    valid={this.state.ResetForm[\"password\"].valid}\r\n                    touched={this.state.ResetForm[\"password\"].touched}\r\n                  ></Input>\r\n                  <Button auth=\"SET NEW PASSWORD\"></Button>        \r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Footer/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}