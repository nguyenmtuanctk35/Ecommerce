{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\ecommerce\\\\front-end\\\\src\\\\Containers\\\\Auth\\\\ForgetPassword\\\\ResetPassword\\\\ResetPassword.js\";\nimport React, { Component } from \"react\";\nimport swal from 'sweetalert';\nimport Button from \"../../../../Components/Button/Button\";\nimport Input from \"../../../../Components/Input/Input\";\nimport \"./ResetPassword.css\";\nimport { email, required } from \"../../../../util/validators\";\nimport Footer from '../../../../Components/MainComponents/Footer/Footer';\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ResetForm: {\n        email: {\n          value: \"\",\n          valid: false,\n          touched: false,\n          validators: [required, email]\n        },\n        formIsValid: false\n      }\n    };\n\n    this.resetPasswordHandler = async (event, authData) => {\n      event.preventDefault();\n      fetch(process.env.BACKEND_URL + '/auth/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: authData.email\n        })\n      }).then(res => res.json()).then(result => {\n        swal({\n          title: \"Send email!\",\n          text: \"Winkel sent reset password email for you.Please check your email\",\n          icon: \"success\",\n          buttons: {\n            text: 'OK'\n          }\n        });\n        this.props.history.push('/');\n      }).catch(err => console.log(err));\n    };\n\n    this.inputChangeHandler = (input, value) => {\n      this.setState(prevState => {\n        let isValid = true;\n\n        for (const validator of prevState.ResetForm[input].validators) {\n          isValid = isValid && validator(value);\n        }\n\n        const updatedForm = { ...prevState.ResetForm,\n          [input]: { ...prevState.ResetForm[input],\n            valid: isValid,\n            value: value\n          }\n        };\n        let formIsValid = true;\n\n        for (const inputName in updatedForm) {\n          formIsValid = formIsValid && updatedForm[inputName].valid;\n        }\n\n        return {\n          ResetForm: updatedForm,\n          formIsValid: formIsValid\n        };\n      });\n    };\n\n    this.inputBlurHandler = input => {\n      this.setState(prevState => {\n        return {\n          ResetForm: { ...prevState.ResetForm,\n            [input]: { ...prevState.ResetForm[input],\n              touched: true\n            }\n          }\n        };\n      });\n    };\n  }\n\n  render() {\n    localStorage.removeItem(\"page\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loginSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-lg-6\",\n      style: {\n        display: 'block',\n        margin: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      \"aria-current\": \"page\",\n      className: \"navbar-brand login\",\n      href: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }, \"Winkel\"), /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"loginTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: e => this.resetPasswordHandler(e, {\n        email: this.state.ResetForm.email.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      id: \"email\",\n      textLabel: \"Username or email address\",\n      type: \"email\",\n      onChange: this.inputChangeHandler,\n      onBlur: this.inputBlurHandler.bind(this, \"email\"),\n      value: this.state.ResetForm[\"email\"].value,\n      valid: this.state.ResetForm[\"email\"].valid,\n      touched: this.state.ResetForm[\"email\"].touched,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      auth: \"SEND EMAILL TO RESET PASSWORD\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 19\n      }\n    })))))), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/ecommerce/front-end/src/Containers/Auth/ForgetPassword/ResetPassword/ResetPassword.js"],"names":["React","Component","swal","Button","Input","email","required","Footer","Login","state","ResetForm","value","valid","touched","validators","formIsValid","resetPasswordHandler","event","authData","preventDefault","fetch","process","env","BACKEND_URL","method","headers","body","JSON","stringify","then","res","json","result","title","text","icon","buttons","props","history","push","catch","err","console","log","inputChangeHandler","input","setState","prevState","isValid","validator","updatedForm","inputName","inputBlurHandler","render","localStorage","removeItem","display","margin","e","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport swal from 'sweetalert';\r\nimport Button from \"../../../../Components/Button/Button\";\r\nimport Input from \"../../../../Components/Input/Input\";\r\nimport \"./ResetPassword.css\";\r\nimport { email,required } from \"../../../../util/validators\";\r\nimport Footer from '../../../../Components/MainComponents/Footer/Footer'\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    ResetForm: {\r\n      email: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        validators: [required, email],\r\n      },\r\n      formIsValid: false,\r\n    },\r\n  };\r\n\r\n  resetPasswordHandler=async(event,authData)=>{\r\n    event.preventDefault();\r\n    fetch(process.env.BACKEND_URL+'/auth/reset-password',{\r\n      method:'POST',\r\n      headers:{\r\n        'Content-Type':'application/json'\r\n            },\r\n      body:JSON.stringify({email:authData.email}),\r\n    })\r\n    .then(res=>res.json())\r\n      .then(result=>{\r\n        swal({\r\n          title: \"Send email!\",\r\n          text: \"Winkel sent reset password email for you.Please check your email\",\r\n          icon: \"success\",\r\n          buttons:{\r\n            text:'OK'\r\n          }\r\n        })\r\n        this.props.history.push('/')\r\n      })\r\n    .catch(err=>console.log(err))\r\n  }\r\n  inputChangeHandler = (input, value) => {\r\n    this.setState((prevState) => {\r\n      let isValid = true;\r\n      for (const validator of prevState.ResetForm[input].validators) {\r\n        isValid = isValid && validator(value);\r\n      }\r\n      const updatedForm = {\r\n        ...prevState.ResetForm,\r\n        [input]: {\r\n          ...prevState.ResetForm[input],\r\n          valid: isValid,\r\n          value: value,\r\n        },\r\n      };\r\n      let formIsValid = true;\r\n      for (const inputName in updatedForm) {\r\n        formIsValid = formIsValid && updatedForm[inputName].valid;\r\n      }\r\n      return {\r\n        ResetForm: updatedForm,\r\n        formIsValid: formIsValid,\r\n      };\r\n    });\r\n  };\r\n\r\n  inputBlurHandler = (input) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        ResetForm: {\r\n          ...prevState.ResetForm,\r\n          [input]: {\r\n            ...prevState.ResetForm[input],\r\n            touched: true,\r\n          },\r\n        },\r\n      };\r\n    });\r\n  };\r\n  render() {\r\n    localStorage.removeItem(\"page\");\r\n    return (\r\n      <div className=\"loginSection\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-6\" style={{display:'block',margin:'auto'}}>\r\n              <div className=\"login-form\">\r\n              <a aria-current=\"page\" className=\"navbar-brand login\" href=\"/\">Winkel</a>\r\n                <h2 className=\"loginTitle\">Login</h2>\r\n                <form  onSubmit={(e) =>this.resetPasswordHandler(e, {\r\n                      email: this.state.ResetForm.email.value})}>\r\n                  <Input\r\n                    id=\"email\"\r\n                    textLabel=\"Username or email address\"\r\n                    type=\"email\"\r\n                    onChange={this.inputChangeHandler}\r\n                    onBlur={this.inputBlurHandler.bind(this, \"email\")}\r\n                    value={this.state.ResetForm[\"email\"].value}\r\n                    valid={this.state.ResetForm[\"email\"].valid}\r\n                    touched={this.state.ResetForm[\"email\"].touched}\r\n                  ></Input>\r\n              \r\n                  <Button auth=\"SEND EMAILL TO RESET PASSWORD\"></Button>        \r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Footer/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}